import { DEFAULT_STATE, MAX_ZOOM, MIN_ZOOM } from './constants';
import { getClientXY, getScale, getTouchesRange, getWheelDelta, isTouch, isTouchEvent, limitZoom } from './helpers';
export default function create({ element, minZoom = MIN_ZOOM, maxZoom = MAX_ZOOM, captureWheel }) {
    const touch = isTouch();
    let action = 'none';
    let state = DEFAULT_STATE;
    const current = { x: 0, y: 0, z: 0, range: 0 };
    function setState(value) {
        state = value;
        const point = element.children.item(0);
        if (point)
            point.style.transform = `translate(${value.x}px, ${value.y}px) scale(${value.z})`;
    }
    function setCurrentXY({ X, Y }) {
        current.x = X;
        current.y = Y;
    }
    function startMoving(event) {
        action = 'move';
        setCurrentXY(getClientXY(event));
    }
    function setPosition(z, pageX, pageY) {
        const { left, top } = element.getBoundingClientRect();
        const ratio = z / state.z;
        const offsetX = (pageX - left - window.pageXOffset) - state.x;
        const offsetY = (pageY - top - window.pageYOffset) - state.y;
        setState({
            x: state.x - ((offsetX * ratio) - offsetX),
            y: state.y - ((offsetY * ratio) - offsetY),
            z,
        });
    }
    function onStart(event) {
        event.preventDefault();
        if (isTouchEvent(event) && event.touches.length === 2) {
            action = 'pinch';
            current.z = state.z;
            current.range = getTouchesRange(event);
        }
        else
            startMoving(event);
    }
    function onMove(event) {
        event.stopImmediatePropagation();
        event.preventDefault();
        if (action === 'move') {
            const clientXY = getClientXY(event);
            const x = state.x - (current.x - clientXY.X);
            const y = state.y - (current.y - clientXY.Y);
            setCurrentXY(clientXY);
            setState({ x, y, z: state.z });
        }
        else if (action === 'pinch') {
            const { scale, pageX, pageY } = getScale(event, current.range);
            const z = limitZoom(current.z * scale, minZoom, maxZoom);
            setPosition(z, pageX, pageY);
        }
    }
    function onEnd(event) {
        if (action === 'pinch' && isTouchEvent(event) && event.touches.length === 1)
            startMoving(event);
        else
            action = 'none';
    }
    function onWheel(event) {
        if (!captureWheel && !event.altKey)
            return;
        event.preventDefault();
        event.stopPropagation();
        const delta = getWheelDelta(event) * -1;
        const z = limitZoom(state.z + delta, minZoom, maxZoom);
        setPosition(z, event.pageX, event.pageY);
    }
    const events = [
        { type: touch ? 'touchstart' : 'mousedown', listener: onStart },
        { type: touch ? 'touchmove' : 'mousemove', listener: onMove },
        { type: touch ? 'touchend' : 'mouseup', listener: onEnd },
        { type: touch ? 'touchleave' : 'mouseleave', listener: onEnd },
        { type: 'touchcancel', listener: onEnd },
        { type: 'wheel', listener: onWheel },
    ];
    const { width, height } = element.getBoundingClientRect();
    setState({ x: width / 2, y: height / 2, z: state.z });
    events.forEach(({ type, listener }) => element.addEventListener(type, listener));
    return () => events.forEach(({ type, listener }) => element.removeEventListener(type, listener));
}
//# sourceMappingURL=index.js.map
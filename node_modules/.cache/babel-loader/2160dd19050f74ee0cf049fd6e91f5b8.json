{"ast":null,"code":"import { toMap, withId } from './utils';\nimport { withType } from './utils/family';\nimport { FamilyType } from './types';\n\nclass Store {\n  constructor(nodes, rootId) {\n    if (!nodes.find(withId(rootId))) throw new ReferenceError();\n    this.nextId = 0;\n    this.families = new Map();\n    this.nodes = toMap(nodes);\n    this.root = this.nodes.get(rootId);\n  }\n\n  getNextId() {\n    return ++this.nextId;\n  }\n\n  getNode(id) {\n    return this.nodes.get(id);\n  }\n\n  getNodes(ids) {\n    return ids.map(id => this.getNode(id));\n  }\n\n  getFamily(id) {\n    return this.families.get(id);\n  }\n\n  get familiesArray() {\n    return [...this.families.values()];\n  }\n\n  get rootFamilies() {\n    return this.familiesArray.filter(withType(FamilyType.root));\n  }\n\n  get rootFamily() {\n    return this.rootFamilies.find(family => family.main);\n  }\n\n}\n\nexport default Store;","map":{"version":3,"sources":["/var/projets/broglie-social-react/sociala-react/node_modules/relatives-tree/lib/store.js"],"names":["toMap","withId","withType","FamilyType","Store","constructor","nodes","rootId","find","ReferenceError","nextId","families","Map","root","get","getNextId","getNode","id","getNodes","ids","map","getFamily","familiesArray","values","rootFamilies","filter","rootFamily","family","main"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,MAAhB,QAA8B,SAA9B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,UAAT,QAA2B,SAA3B;;AACA,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvB,QAAI,CAACD,KAAK,CAACE,IAAN,CAAWP,MAAM,CAACM,MAAD,CAAjB,CAAL,EACI,MAAM,IAAIE,cAAJ,EAAN;AACJ,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACA,SAAKN,KAAL,GAAaN,KAAK,CAACM,KAAD,CAAlB;AACA,SAAKO,IAAL,GAAa,KAAKP,KAAL,CAAWQ,GAAX,CAAeP,MAAf,CAAb;AACH;;AACDQ,EAAAA,SAAS,GAAG;AAAE,WAAO,EAAE,KAAKL,MAAd;AAAuB;;AACrCM,EAAAA,OAAO,CAACC,EAAD,EAAK;AACR,WAAO,KAAKX,KAAL,CAAWQ,GAAX,CAAeG,EAAf,CAAP;AACH;;AACDC,EAAAA,QAAQ,CAACC,GAAD,EAAM;AACV,WAAOA,GAAG,CAACC,GAAJ,CAAQH,EAAE,IAAI,KAAKD,OAAL,CAAaC,EAAb,CAAd,CAAP;AACH;;AACDI,EAAAA,SAAS,CAACJ,EAAD,EAAK;AACV,WAAO,KAAKN,QAAL,CAAcG,GAAd,CAAkBG,EAAlB,CAAP;AACH;;AACgB,MAAbK,aAAa,GAAG;AAChB,WAAO,CAAC,GAAG,KAAKX,QAAL,CAAcY,MAAd,EAAJ,CAAP;AACH;;AACe,MAAZC,YAAY,GAAG;AACf,WAAO,KAAKF,aAAL,CAAmBG,MAAnB,CAA0BvB,QAAQ,CAACC,UAAU,CAACU,IAAZ,CAAlC,CAAP;AACH;;AACa,MAAVa,UAAU,GAAG;AACb,WAAO,KAAKF,YAAL,CAAkBhB,IAAlB,CAAuBmB,MAAM,IAAIA,MAAM,CAACC,IAAxC,CAAP;AACH;;AA3BO;;AA6BZ,eAAexB,KAAf","sourcesContent":["import { toMap, withId } from './utils';\nimport { withType } from './utils/family';\nimport { FamilyType } from './types';\nclass Store {\n    constructor(nodes, rootId) {\n        if (!nodes.find(withId(rootId)))\n            throw new ReferenceError();\n        this.nextId = 0;\n        this.families = new Map();\n        this.nodes = toMap(nodes);\n        this.root = (this.nodes.get(rootId));\n    }\n    getNextId() { return ++this.nextId; }\n    getNode(id) {\n        return this.nodes.get(id);\n    }\n    getNodes(ids) {\n        return ids.map(id => this.getNode(id));\n    }\n    getFamily(id) {\n        return this.families.get(id);\n    }\n    get familiesArray() {\n        return [...this.families.values()];\n    }\n    get rootFamilies() {\n        return this.familiesArray.filter(withType(FamilyType.root));\n    }\n    get rootFamily() {\n        return this.rootFamilies.find(family => family.main);\n    }\n}\nexport default Store;\n"]},"metadata":{},"sourceType":"module"}
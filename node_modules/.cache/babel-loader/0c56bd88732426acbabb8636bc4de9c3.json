{"ast":null,"code":"export const nextIndex = index => index + 1;\nexport const prop = name => item => item[name];\nexport const withId = id => item => item.id === id;\nexport const withIds = function (ids) {\n  let include = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return item => ids.includes(item.id) === include;\n};\nexport const unique = (item, index, arr) => arr.indexOf(item) === index;\nexport const inAscOrder = (v1, v2) => v1 - v2;\nexport const pipe = function () {\n  for (var _len = arguments.length, fus = new Array(_len), _key = 0; _key < _len; _key++) {\n    fus[_key] = arguments[_key];\n  }\n\n  return init => fus.reduce((res, fn) => fn(res), init);\n};\nexport const min = arr => Math.min.apply(null, arr);\nexport const max = arr => Math.max.apply(null, arr);\nexport const toMap = items => new Map(items.map(item => [item.id, Object.assign({}, item)]));\nexport const hasDiffParents = node => node.parents.map(prop('type')).filter(unique).length > 1;\nexport const byGender = target => (_, b) => b.gender !== target ? -1 : 1;\nexport const relToNode = store => rel => store.getNode(rel.id);\nexport const withRelType = function () {\n  for (var _len2 = arguments.length, types = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    types[_key2] = arguments[_key2];\n  }\n\n  return item => types.includes(item.type);\n};","map":{"version":3,"sources":["/var/projets/broglie-social-react/sociala-react/node_modules/relatives-tree/lib/utils/index.js"],"names":["nextIndex","index","prop","name","item","withId","id","withIds","ids","include","includes","unique","arr","indexOf","inAscOrder","v1","v2","pipe","fus","init","reduce","res","fn","min","Math","apply","max","toMap","items","Map","map","Object","assign","hasDiffParents","node","parents","filter","length","byGender","target","_","b","gender","relToNode","store","rel","getNode","withRelType","types","type"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAIC,KAAD,IAAWA,KAAK,GAAG,CAArC;AACP,OAAO,MAAMC,IAAI,GAAIC,IAAD,IAAWC,IAAD,IAAUA,IAAI,CAACD,IAAD,CAArC;AACP,OAAO,MAAME,MAAM,GAAIC,EAAD,IAASF,IAAD,IAAUA,IAAI,CAACE,EAAL,KAAYA,EAA7C;AACP,OAAO,MAAMC,OAAO,GAAG,UAACC,GAAD;AAAA,MAAMC,OAAN,uEAAgB,IAAhB;AAAA,SAA2BL,IAAD,IAAUI,GAAG,CAACE,QAAJ,CAAaN,IAAI,CAACE,EAAlB,MAA0BG,OAA9D;AAAA,CAAhB;AACP,OAAO,MAAME,MAAM,GAAG,CAACP,IAAD,EAAOH,KAAP,EAAcW,GAAd,KAAsBA,GAAG,CAACC,OAAJ,CAAYT,IAAZ,MAAsBH,KAA3D;AACP,OAAO,MAAMa,UAAU,GAAG,CAACC,EAAD,EAAKC,EAAL,KAAYD,EAAE,GAAGC,EAApC;AACP,OAAO,MAAMC,IAAI,GAAG;AAAA,oCAAIC,GAAJ;AAAIA,IAAAA,GAAJ;AAAA;;AAAA,SAAaC,IAAD,IAAUD,GAAG,CAACE,MAAJ,CAAW,CAACC,GAAD,EAAMC,EAAN,KAAaA,EAAE,CAACD,GAAD,CAA1B,EAAiCF,IAAjC,CAAtB;AAAA,CAAb;AACP,OAAO,MAAMI,GAAG,GAAIX,GAAD,IAASY,IAAI,CAACD,GAAL,CAASE,KAAT,CAAe,IAAf,EAAqBb,GAArB,CAArB;AACP,OAAO,MAAMc,GAAG,GAAId,GAAD,IAASY,IAAI,CAACE,GAAL,CAASD,KAAT,CAAe,IAAf,EAAqBb,GAArB,CAArB;AACP,OAAO,MAAMe,KAAK,GAAIC,KAAD,IAAY,IAAIC,GAAJ,CAAQD,KAAK,CAACE,GAAN,CAAW1B,IAAD,IAAU,CAACA,IAAI,CAACE,EAAN,EAAUyB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB5B,IAAlB,CAAV,CAApB,CAAR,CAA1B;AACP,OAAO,MAAM6B,cAAc,GAAIC,IAAD,IAAUA,IAAI,CAACC,OAAL,CAAaL,GAAb,CAAiB5B,IAAI,CAAC,MAAD,CAArB,EAA+BkC,MAA/B,CAAsCzB,MAAtC,EAA8C0B,MAA9C,GAAuD,CAAxF;AACP,OAAO,MAAMC,QAAQ,GAAIC,MAAD,IAAY,CAACC,CAAD,EAAIC,CAAJ,KAAWA,CAAC,CAACC,MAAF,KAAaH,MAAd,GAAwB,CAAC,CAAzB,GAA6B,CAApE;AACP,OAAO,MAAMI,SAAS,GAAIC,KAAD,IAAYC,GAAD,IAASD,KAAK,CAACE,OAAN,CAAcD,GAAG,CAACvC,EAAlB,CAAtC;AACP,OAAO,MAAMyC,WAAW,GAAG;AAAA,qCAAIC,KAAJ;AAAIA,IAAAA,KAAJ;AAAA;;AAAA,SAAe5C,IAAD,IAAU4C,KAAK,CAACtC,QAAN,CAAeN,IAAI,CAAC6C,IAApB,CAAxB;AAAA,CAApB","sourcesContent":["export const nextIndex = (index) => index + 1;\nexport const prop = (name) => (item) => item[name];\nexport const withId = (id) => (item) => item.id === id;\nexport const withIds = (ids, include = true) => ((item) => ids.includes(item.id) === include);\nexport const unique = (item, index, arr) => arr.indexOf(item) === index;\nexport const inAscOrder = (v1, v2) => v1 - v2;\nexport const pipe = (...fus) => (init) => fus.reduce((res, fn) => fn(res), init);\nexport const min = (arr) => Math.min.apply(null, arr);\nexport const max = (arr) => Math.max.apply(null, arr);\nexport const toMap = (items) => (new Map(items.map((item) => [item.id, Object.assign({}, item)])));\nexport const hasDiffParents = (node) => node.parents.map(prop('type')).filter(unique).length > 1;\nexport const byGender = (target) => (_, b) => (b.gender !== target) ? -1 : 1;\nexport const relToNode = (store) => (rel) => store.getNode(rel.id);\nexport const withRelType = (...types) => (item) => types.includes(item.type);\n"]},"metadata":{},"sourceType":"module"}
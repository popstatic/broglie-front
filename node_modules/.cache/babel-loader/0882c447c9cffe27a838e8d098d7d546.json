{"ast":null,"code":"import { correctUnitsShift, getUnitX, sameAs } from '../utils/units';\nimport { rightOf } from '../utils/family';\nimport { nextIndex, withId } from '../utils';\nimport { arrangeParentsIn } from '../utils/arrangeParentsIn';\n\nvar arrangeNextFamily = function arrangeNextFamily(family, nextFamily, right) {\n  var unit = family.parents[0];\n  var index = nextFamily.children.findIndex(sameAs(unit));\n  index === 0 ? nextFamily.X = getUnitX(family, unit) - nextFamily.children[index].pos : nextFamily.children[index].pos = getUnitX(family, unit) - nextFamily.X;\n  var nextIdx = nextIndex(index);\n\n  if (nextFamily.children[nextIdx]) {\n    correctUnitsShift(nextFamily.children.slice(nextIdx), right - getUnitX(nextFamily, nextFamily.children[nextIdx]));\n  }\n};\n\nvar arrangeMiddleFamilies = function arrangeMiddleFamilies(families, fid, startFrom) {\n  var start = nextIndex(families.findIndex(withId(fid)));\n  var family = families[start];\n\n  if (family) {\n    var shift = startFrom - family.X;\n\n    for (var i = start; i < families.length; i++) {\n      families[i].X += shift;\n    }\n  }\n};\n\nexport var arrangeFamiliesFunc = function arrangeFamiliesFunc(store) {\n  return function (family) {\n    var right = 0;\n\n    while (family.pid) {\n      right = Math.max(right, rightOf(family));\n      var nextFamily = store.getFamily(family.pid);\n      arrangeNextFamily(family, nextFamily, right);\n      arrangeParentsIn(nextFamily);\n      if (!nextFamily.pid) arrangeMiddleFamilies(store.rootFamilies, nextFamily.id, rightOf(nextFamily));\n      family = nextFamily;\n    }\n  };\n};","map":{"version":3,"sources":["/var/projets/broglie-social-react/sociala-react/node_modules/relatives-tree/lib/children/arrange.js"],"names":["correctUnitsShift","getUnitX","sameAs","rightOf","nextIndex","withId","arrangeParentsIn","arrangeNextFamily","family","nextFamily","right","unit","parents","index","children","findIndex","X","pos","nextIdx","slice","arrangeMiddleFamilies","families","fid","startFrom","start","shift","i","length","arrangeFamiliesFunc","store","pid","Math","max","getFamily","rootFamilies","id"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,QAA5B,EAAsCC,MAAtC,QAAoD,gBAApD;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,UAAlC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;;AACA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD,EAASC,UAAT,EAAqBC,KAArB,EAA+B;AACrD,MAAMC,IAAI,GAAGH,MAAM,CAACI,OAAP,CAAe,CAAf,CAAb;AACA,MAAMC,KAAK,GAAGJ,UAAU,CAACK,QAAX,CAAoBC,SAApB,CAA8Bb,MAAM,CAACS,IAAD,CAApC,CAAd;AACAE,EAAAA,KAAK,KAAK,CAAV,GACMJ,UAAU,CAACO,CAAX,GAAef,QAAQ,CAACO,MAAD,EAASG,IAAT,CAAR,GAAyBF,UAAU,CAACK,QAAX,CAAoBD,KAApB,EAA2BI,GADzE,GAEMR,UAAU,CAACK,QAAX,CAAoBD,KAApB,EAA2BI,GAA3B,GAAiChB,QAAQ,CAACO,MAAD,EAASG,IAAT,CAAR,GAAyBF,UAAU,CAACO,CAF3E;AAGA,MAAME,OAAO,GAAGd,SAAS,CAACS,KAAD,CAAzB;;AACA,MAAIJ,UAAU,CAACK,QAAX,CAAoBI,OAApB,CAAJ,EAAkC;AAC9BlB,IAAAA,iBAAiB,CAACS,UAAU,CAACK,QAAX,CAAoBK,KAApB,CAA0BD,OAA1B,CAAD,EAAqCR,KAAK,GAAGT,QAAQ,CAACQ,UAAD,EAAaA,UAAU,CAACK,QAAX,CAAoBI,OAApB,CAAb,CAArD,CAAjB;AACH;AACJ,CAVD;;AAWA,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,QAAD,EAAWC,GAAX,EAAgBC,SAAhB,EAA8B;AACxD,MAAMC,KAAK,GAAGpB,SAAS,CAACiB,QAAQ,CAACN,SAAT,CAAmBV,MAAM,CAACiB,GAAD,CAAzB,CAAD,CAAvB;AACA,MAAMd,MAAM,GAAGa,QAAQ,CAACG,KAAD,CAAvB;;AACA,MAAIhB,MAAJ,EAAY;AACR,QAAMiB,KAAK,GAAGF,SAAS,GAAGf,MAAM,CAACQ,CAAjC;;AACA,SAAK,IAAIU,CAAC,GAAGF,KAAb,EAAoBE,CAAC,GAAGL,QAAQ,CAACM,MAAjC,EAAyCD,CAAC,EAA1C;AACIL,MAAAA,QAAQ,CAACK,CAAD,CAAR,CAAYV,CAAZ,IAAiBS,KAAjB;AADJ;AAEH;AACJ,CARD;;AASA,OAAO,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD;AAAA,SAAY,UAACrB,MAAD,EAAY;AACvD,QAAIE,KAAK,GAAG,CAAZ;;AACA,WAAOF,MAAM,CAACsB,GAAd,EAAmB;AACfpB,MAAAA,KAAK,GAAGqB,IAAI,CAACC,GAAL,CAAStB,KAAT,EAAgBP,OAAO,CAACK,MAAD,CAAvB,CAAR;AACA,UAAMC,UAAU,GAAGoB,KAAK,CAACI,SAAN,CAAgBzB,MAAM,CAACsB,GAAvB,CAAnB;AACAvB,MAAAA,iBAAiB,CAACC,MAAD,EAASC,UAAT,EAAqBC,KAArB,CAAjB;AACAJ,MAAAA,gBAAgB,CAACG,UAAD,CAAhB;AACA,UAAI,CAACA,UAAU,CAACqB,GAAhB,EACIV,qBAAqB,CAACS,KAAK,CAACK,YAAP,EAAqBzB,UAAU,CAAC0B,EAAhC,EAAoChC,OAAO,CAACM,UAAD,CAA3C,CAArB;AACJD,MAAAA,MAAM,GAAGC,UAAT;AACH;AACJ,GAXkC;AAAA,CAA5B","sourcesContent":["import { correctUnitsShift, getUnitX, sameAs } from '../utils/units';\nimport { rightOf } from '../utils/family';\nimport { nextIndex, withId } from '../utils';\nimport { arrangeParentsIn } from '../utils/arrangeParentsIn';\nconst arrangeNextFamily = (family, nextFamily, right) => {\n    const unit = family.parents[0];\n    const index = nextFamily.children.findIndex(sameAs(unit));\n    index === 0\n        ? nextFamily.X = getUnitX(family, unit) - nextFamily.children[index].pos\n        : nextFamily.children[index].pos = getUnitX(family, unit) - nextFamily.X;\n    const nextIdx = nextIndex(index);\n    if (nextFamily.children[nextIdx]) {\n        correctUnitsShift(nextFamily.children.slice(nextIdx), right - getUnitX(nextFamily, nextFamily.children[nextIdx]));\n    }\n};\nconst arrangeMiddleFamilies = (families, fid, startFrom) => {\n    const start = nextIndex(families.findIndex(withId(fid)));\n    const family = families[start];\n    if (family) {\n        const shift = startFrom - family.X;\n        for (let i = start; i < families.length; i++)\n            families[i].X += shift;\n    }\n};\nexport const arrangeFamiliesFunc = (store) => ((family) => {\n    let right = 0;\n    while (family.pid) {\n        right = Math.max(right, rightOf(family));\n        const nextFamily = store.getFamily(family.pid);\n        arrangeNextFamily(family, nextFamily, right);\n        arrangeParentsIn(nextFamily);\n        if (!nextFamily.pid)\n            arrangeMiddleFamilies(store.rootFamilies, nextFamily.id, rightOf(nextFamily));\n        family = nextFamily;\n    }\n});\n"]},"metadata":{},"sourceType":"module"}
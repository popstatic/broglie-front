{"ast":null,"code":"import _toConsumableArray from \"/var/projets/broglie-social-react/sociala-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { SIZE } from '../constants';\nimport { prop } from './index';\nexport var newUnit = function newUnit(fid, nodes) {\n  var isChild = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    fid: fid,\n    child: isChild,\n    nodes: _toConsumableArray(nodes),\n    pos: 0\n  };\n};\nexport var nodeIds = function nodeIds(unit) {\n  return unit.nodes.map(prop('id'));\n};\nexport var nodeCount = function nodeCount(unit) {\n  return unit.nodes.length;\n};\nexport var hasChildren = function hasChildren(unit) {\n  return unit.nodes.some(function (node) {\n    return node.children.length;\n  });\n};\nexport var rightSide = function rightSide(unit) {\n  return unit.pos + nodeCount(unit) * SIZE;\n};\nexport var sameAs = function sameAs(target) {\n  return function (unit) {\n    return nodeIds(target).join('') === nodeIds(unit).join('');\n  };\n};\nexport var getUnitX = function getUnitX(family, unit) {\n  return family.X + unit.pos;\n};\nexport var unitsToNodes = function unitsToNodes(units) {\n  return units.map(prop('nodes')).flat();\n};\nexport var arrangeInOrder = function arrangeInOrder(units) {\n  units.forEach(function (unit, idx, self) {\n    return unit.pos = idx === 0 ? 0 : rightSide(self[idx - 1]);\n  });\n};\nexport var correctUnitsShift = function correctUnitsShift(units, shift) {\n  return units.forEach(function (unit) {\n    return unit.pos += shift;\n  });\n};","map":{"version":3,"sources":["/var/projets/broglie-social-react/sociala-react/node_modules/relatives-tree/lib/utils/units.js"],"names":["SIZE","prop","newUnit","fid","nodes","isChild","child","pos","nodeIds","unit","map","nodeCount","length","hasChildren","some","node","children","rightSide","sameAs","target","join","getUnitX","family","X","unitsToNodes","units","flat","arrangeInOrder","forEach","idx","self","correctUnitsShift","shift"],"mappings":";AAAA,SAASA,IAAT,QAAqB,cAArB;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAMC,KAAN;AAAA,MAAaC,OAAb,uEAAuB,KAAvB;AAAA,SAAkC;AACrDF,IAAAA,GAAG,EAAHA,GADqD;AAErDG,IAAAA,KAAK,EAAED,OAF8C;AAGrDD,IAAAA,KAAK,qBAAMA,KAAN,CAHgD;AAIrDG,IAAAA,GAAG,EAAE;AAJgD,GAAlC;AAAA,CAAhB;AAMP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,SAAUA,IAAI,CAACL,KAAL,CAAWM,GAAX,CAAeT,IAAI,CAAC,IAAD,CAAnB,CAAV;AAAA,CAAhB;AACP,OAAO,IAAMU,SAAS,GAAG,SAAZA,SAAY,CAACF,IAAD;AAAA,SAAUA,IAAI,CAACL,KAAL,CAAWQ,MAArB;AAAA,CAAlB;AACP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACJ,IAAD;AAAA,SAAUA,IAAI,CAACL,KAAL,CAAWU,IAAX,CAAgB,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,QAAL,CAAcJ,MAAlB;AAAA,GAApB,CAAV;AAAA,CAApB;AACP,OAAO,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAACR,IAAD;AAAA,SAAUA,IAAI,CAACF,GAAL,GAAWI,SAAS,CAACF,IAAD,CAAT,GAAkBT,IAAvC;AAAA,CAAlB;AACP,OAAO,IAAMkB,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD;AAAA,SAAY,UAACV,IAAD;AAAA,WAAUD,OAAO,CAACW,MAAD,CAAP,CAAgBC,IAAhB,CAAqB,EAArB,MAA6BZ,OAAO,CAACC,IAAD,CAAP,CAAcW,IAAd,CAAmB,EAAnB,CAAvC;AAAA,GAAZ;AAAA,CAAf;AACP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAASb,IAAT;AAAA,SAAkBa,MAAM,CAACC,CAAP,GAAWd,IAAI,CAACF,GAAlC;AAAA,CAAjB;AACP,OAAO,IAAMiB,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACf,GAAN,CAAUT,IAAI,CAAC,OAAD,CAAd,EAAyByB,IAAzB,EAAX;AAAA,CAArB;AACP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACF,KAAD,EAAW;AACrCA,EAAAA,KAAK,CAACG,OAAN,CAAc,UAACnB,IAAD,EAAOoB,GAAP,EAAYC,IAAZ;AAAA,WAAsBrB,IAAI,CAACF,GAAL,GAAWsB,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgBZ,SAAS,CAACa,IAAI,CAACD,GAAG,GAAG,CAAP,CAAL,CAA1D;AAAA,GAAd;AACH,CAFM;AAGP,OAAO,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAACN,KAAD,EAAQO,KAAR;AAAA,SAAmBP,KAAK,CAACG,OAAN,CAAc,UAACnB,IAAD;AAAA,WAAUA,IAAI,CAACF,GAAL,IAAYyB,KAAtB;AAAA,GAAd,CAAnB;AAAA,CAA1B","sourcesContent":["import { SIZE } from '../constants';\nimport { prop } from './index';\nexport const newUnit = (fid, nodes, isChild = false) => ({\n    fid,\n    child: isChild,\n    nodes: [...nodes],\n    pos: 0,\n});\nexport const nodeIds = (unit) => unit.nodes.map(prop('id'));\nexport const nodeCount = (unit) => unit.nodes.length;\nexport const hasChildren = (unit) => unit.nodes.some(node => node.children.length);\nexport const rightSide = (unit) => unit.pos + nodeCount(unit) * SIZE;\nexport const sameAs = (target) => (unit) => nodeIds(target).join('') === nodeIds(unit).join('');\nexport const getUnitX = (family, unit) => family.X + unit.pos;\nexport const unitsToNodes = (units) => units.map(prop('nodes')).flat();\nexport const arrangeInOrder = (units) => {\n    units.forEach((unit, idx, self) => (unit.pos = idx === 0 ? 0 : rightSide(self[idx - 1])));\n};\nexport const correctUnitsShift = (units, shift) => (units.forEach((unit) => unit.pos += shift));\n"]},"metadata":{},"sourceType":"module"}
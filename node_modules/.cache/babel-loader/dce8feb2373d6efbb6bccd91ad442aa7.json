{"ast":null,"code":"import { getUnitX } from './units';\nimport { hasHiddenRelatives } from './hasHiddenRelatives';\nimport { SIZE } from '../constants';\nimport { FamilyType } from '../types';\n\nconst extendNode = family => unit => unit.nodes.map((node, idx) => Object.assign(Object.assign({}, node), {\n  top: family.Y + (unit.child && !!family.parents.length ? SIZE : 0),\n  left: getUnitX(family, unit) + idx * SIZE,\n  hasSubTree: hasHiddenRelatives(family, node)\n}));\n\nconst getParentNodes = family => ([FamilyType.root, FamilyType.parent].includes(family.type) ? family.parents : []).map(extendNode(family));\n\nconst getChildNodes = family => ([FamilyType.root, FamilyType.child].includes(family.type) ? family.children : []).map(extendNode(family));\n\nconst mapFamily = family => [getParentNodes(family), getChildNodes(family)].flat(2);\n\nexport const getExtendedNodes = families => families.map(mapFamily).flat();","map":{"version":3,"sources":["/var/projets/broglie-social-react/sociala-react/node_modules/relatives-tree/lib/utils/getExtendedNodes.js"],"names":["getUnitX","hasHiddenRelatives","SIZE","FamilyType","extendNode","family","unit","nodes","map","node","idx","Object","assign","top","Y","child","parents","length","left","hasSubTree","getParentNodes","root","parent","includes","type","getChildNodes","children","mapFamily","flat","getExtendedNodes","families"],"mappings":"AAAA,SAASA,QAAT,QAAyB,SAAzB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,UAAT,QAA2B,UAA3B;;AACA,MAAMC,UAAU,GAAIC,MAAD,IAAcC,IAAD,IAAWA,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAe,CAACC,IAAD,EAAOC,GAAP,KAAgBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,IAAlB,CAAd,EAAuC;AAAEI,EAAAA,GAAG,EAAER,MAAM,CAACS,CAAP,IAAYR,IAAI,CAACS,KAAL,IAAc,CAAC,CAACV,MAAM,CAACW,OAAP,CAAeC,MAA/B,GAAwCf,IAAxC,GAA+C,CAA3D,CAAP;AAAsEgB,EAAAA,IAAI,EAAElB,QAAQ,CAACK,MAAD,EAASC,IAAT,CAAR,GAA0BI,GAAG,GAAGR,IAA5G;AAAmHiB,EAAAA,UAAU,EAAElB,kBAAkB,CAACI,MAAD,EAASI,IAAT;AAAjJ,CAAvC,CAA/B,CAA3C;;AACA,MAAMW,cAAc,GAAIf,MAAD,IAAY,CAAC,CAACF,UAAU,CAACkB,IAAZ,EAAkBlB,UAAU,CAACmB,MAA7B,EAAqCC,QAArC,CAA8ClB,MAAM,CAACmB,IAArD,IAA6DnB,MAAM,CAACW,OAApE,GAA8E,EAA/E,EAAmFR,GAAnF,CAAuFJ,UAAU,CAACC,MAAD,CAAjG,CAAnC;;AACA,MAAMoB,aAAa,GAAIpB,MAAD,IAAY,CAAC,CAACF,UAAU,CAACkB,IAAZ,EAAkBlB,UAAU,CAACY,KAA7B,EAAoCQ,QAApC,CAA6ClB,MAAM,CAACmB,IAApD,IAA4DnB,MAAM,CAACqB,QAAnE,GAA8E,EAA/E,EAAmFlB,GAAnF,CAAuFJ,UAAU,CAACC,MAAD,CAAjG,CAAlC;;AACA,MAAMsB,SAAS,GAAItB,MAAD,IAAY,CAACe,cAAc,CAACf,MAAD,CAAf,EAAyBoB,aAAa,CAACpB,MAAD,CAAtC,EAAgDuB,IAAhD,CAAqD,CAArD,CAA9B;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,QAAD,IAAcA,QAAQ,CAACtB,GAAT,CAAamB,SAAb,EAAwBC,IAAxB,EAAvC","sourcesContent":["import { getUnitX } from './units';\nimport { hasHiddenRelatives } from './hasHiddenRelatives';\nimport { SIZE } from '../constants';\nimport { FamilyType } from '../types';\nconst extendNode = (family) => ((unit) => (unit.nodes.map((node, idx) => (Object.assign(Object.assign({}, node), { top: family.Y + (unit.child && !!family.parents.length ? SIZE : 0), left: getUnitX(family, unit) + (idx * SIZE), hasSubTree: hasHiddenRelatives(family, node) })))));\nconst getParentNodes = (family) => ([FamilyType.root, FamilyType.parent].includes(family.type) ? family.parents : []).map(extendNode(family));\nconst getChildNodes = (family) => ([FamilyType.root, FamilyType.child].includes(family.type) ? family.children : []).map(extendNode(family));\nconst mapFamily = (family) => [getParentNodes(family), getChildNodes(family)].flat(2);\nexport const getExtendedNodes = (families) => families.map(mapFamily).flat();\n"]},"metadata":{},"sourceType":"module"}
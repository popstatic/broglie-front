{"ast":null,"code":"import _toConsumableArray from \"/var/projets/broglie-social-react/sociala-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { prop, withId, withIds } from '../utils';\nimport { unitsToNodes } from '../utils/units';\nimport { setDefaultUnitShift } from '../utils/setDefaultUnitShift';\n\nvar moveSharedUnitToRight = function moveSharedUnitToRight(sharedIDs) {\n  return function (a, b) {\n    var foundA = a.nodes.some(withIds(sharedIDs));\n    var foundB = b.nodes.some(withIds(sharedIDs));\n    if (foundA && !foundB) return 1;\n    if (!foundA && foundB) return -1;\n    return 0;\n  };\n};\n\nvar sameIn = function sameIn(units) {\n  var target = unitsToNodes(units);\n  return function (node) {\n    return target.some(withId(node.id));\n  };\n};\n\nexport var correctOverlaps = function correctOverlaps(bloodFamily, adoptedFamily) {\n  var sharedIDs = unitsToNodes(bloodFamily.children).filter(sameIn(adoptedFamily.children)).map(prop('id'));\n  var cachePos = bloodFamily.children.map(prop('pos'));\n  bloodFamily.children = _toConsumableArray(bloodFamily.children).sort(moveSharedUnitToRight(sharedIDs));\n  bloodFamily.children.forEach(function (unit, idx) {\n    return unit.pos = cachePos[idx];\n  });\n  adoptedFamily.children = adoptedFamily.children.filter(function (unit) {\n    return unit.nodes.some(withIds(sharedIDs, false));\n  });\n  setDefaultUnitShift(adoptedFamily);\n};","map":{"version":3,"sources":["/var/projets/broglie-social-react/sociala-react/node_modules/relatives-tree/lib/middle/correctOverlaps.js"],"names":["prop","withId","withIds","unitsToNodes","setDefaultUnitShift","moveSharedUnitToRight","sharedIDs","a","b","foundA","nodes","some","foundB","sameIn","units","target","node","id","correctOverlaps","bloodFamily","adoptedFamily","children","filter","map","cachePos","sort","forEach","unit","idx","pos"],"mappings":";AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,OAAvB,QAAsC,UAAtC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,mBAAT,QAAoC,8BAApC;;AACA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,SAAD;AAAA,SAAgB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACpD,QAAMC,MAAM,GAAGF,CAAC,CAACG,KAAF,CAAQC,IAAR,CAAaT,OAAO,CAACI,SAAD,CAApB,CAAf;AACA,QAAMM,MAAM,GAAGJ,CAAC,CAACE,KAAF,CAAQC,IAAR,CAAaT,OAAO,CAACI,SAAD,CAApB,CAAf;AACA,QAAIG,MAAM,IAAI,CAACG,MAAf,EACI,OAAO,CAAP;AACJ,QAAI,CAACH,MAAD,IAAWG,MAAf,EACI,OAAO,CAAC,CAAR;AACJ,WAAO,CAAP;AACH,GAR6B;AAAA,CAA9B;;AASA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAW;AACtB,MAAMC,MAAM,GAAGZ,YAAY,CAACW,KAAD,CAA3B;AACA,SAAO,UAACE,IAAD;AAAA,WAAUD,MAAM,CAACJ,IAAP,CAAYV,MAAM,CAACe,IAAI,CAACC,EAAN,CAAlB,CAAV;AAAA,GAAP;AACH,CAHD;;AAIA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,WAAD,EAAcC,aAAd,EAAgC;AAC3D,MAAMd,SAAS,GAAGH,YAAY,CAACgB,WAAW,CAACE,QAAb,CAAZ,CACbC,MADa,CACNT,MAAM,CAACO,aAAa,CAACC,QAAf,CADA,EAEbE,GAFa,CAETvB,IAAI,CAAC,IAAD,CAFK,CAAlB;AAGA,MAAMwB,QAAQ,GAAGL,WAAW,CAACE,QAAZ,CAAqBE,GAArB,CAAyBvB,IAAI,CAAC,KAAD,CAA7B,CAAjB;AACAmB,EAAAA,WAAW,CAACE,QAAZ,GAAuB,mBAAIF,WAAW,CAACE,QAAhB,EAA0BI,IAA1B,CAA+BpB,qBAAqB,CAACC,SAAD,CAApD,CAAvB;AACAa,EAAAA,WAAW,CAACE,QAAZ,CAAqBK,OAArB,CAA6B,UAACC,IAAD,EAAOC,GAAP;AAAA,WAAeD,IAAI,CAACE,GAAL,GAAWL,QAAQ,CAACI,GAAD,CAAlC;AAAA,GAA7B;AACAR,EAAAA,aAAa,CAACC,QAAd,GAAyBD,aAAa,CAACC,QAAd,CACpBC,MADoB,CACb,UAAAK,IAAI;AAAA,WAAIA,IAAI,CAACjB,KAAL,CAAWC,IAAX,CAAgBT,OAAO,CAACI,SAAD,EAAY,KAAZ,CAAvB,CAAJ;AAAA,GADS,CAAzB;AAEAF,EAAAA,mBAAmB,CAACgB,aAAD,CAAnB;AACH,CAVM","sourcesContent":["import { prop, withId, withIds } from '../utils';\nimport { unitsToNodes } from '../utils/units';\nimport { setDefaultUnitShift } from '../utils/setDefaultUnitShift';\nconst moveSharedUnitToRight = (sharedIDs) => ((a, b) => {\n    const foundA = a.nodes.some(withIds(sharedIDs));\n    const foundB = b.nodes.some(withIds(sharedIDs));\n    if (foundA && !foundB)\n        return 1;\n    if (!foundA && foundB)\n        return -1;\n    return 0;\n});\nconst sameIn = (units) => {\n    const target = unitsToNodes(units);\n    return (node) => target.some(withId(node.id));\n};\nexport const correctOverlaps = (bloodFamily, adoptedFamily) => {\n    const sharedIDs = unitsToNodes(bloodFamily.children)\n        .filter(sameIn(adoptedFamily.children))\n        .map(prop('id'));\n    const cachePos = bloodFamily.children.map(prop('pos'));\n    bloodFamily.children = [...bloodFamily.children].sort(moveSharedUnitToRight(sharedIDs));\n    bloodFamily.children.forEach((unit, idx) => unit.pos = cachePos[idx]);\n    adoptedFamily.children = adoptedFamily.children\n        .filter(unit => unit.nodes.some(withIds(sharedIDs, false)));\n    setDefaultUnitShift(adoptedFamily);\n};\n"]},"metadata":{},"sourceType":"module"}
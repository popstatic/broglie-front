{"ast":null,"code":"import _toConsumableArray from \"/var/projets/broglie-social-react/sociala-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { SIZE } from '../constants';\nimport { max } from './index';\nimport { getUnitX, nodeCount, rightSide } from './units';\nexport var newFamily = function newFamily(id, type) {\n  var main = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    id: id,\n    type: type,\n    main: main,\n    Y: 0,\n    X: 0,\n    parents: [],\n    children: []\n  };\n};\nexport var withType = function withType() {\n  for (var _len = arguments.length, types = new Array(_len), _key = 0; _key < _len; _key++) {\n    types[_key] = arguments[_key];\n  }\n\n  return function (item) {\n    return types.includes(item.type);\n  };\n};\nexport var widthOf = function widthOf(family) {\n  return max([].concat(_toConsumableArray(family.parents), _toConsumableArray(family.children)).map(rightSide));\n};\nexport var heightOf = function heightOf(family) {\n  return [family.parents.length, family.children.length].filter(Boolean).length * SIZE;\n};\nexport var rightOf = function rightOf(family) {\n  return family.X + widthOf(family);\n};\nexport var bottomOf = function bottomOf(family) {\n  return family.Y + heightOf(family);\n};\nexport var unitNodesCount = function unitNodesCount(units) {\n  return units.reduce(function (acc, b) {\n    return acc + nodeCount(b);\n  }, 0);\n};\nexport var getParentsX = function getParentsX(family, unit) {\n  return unit ? getUnitX(family, unit) + nodeCount(unit) : 0;\n};","map":{"version":3,"sources":["/var/projets/broglie-social-react/sociala-react/node_modules/relatives-tree/lib/utils/family.js"],"names":["SIZE","max","getUnitX","nodeCount","rightSide","newFamily","id","type","main","Y","X","parents","children","withType","types","item","includes","widthOf","family","map","heightOf","length","filter","Boolean","rightOf","bottomOf","unitNodesCount","units","reduce","acc","b","getParentsX","unit"],"mappings":";AAAA,SAASA,IAAT,QAAqB,cAArB;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,SAA9B,QAA+C,SAA/C;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,EAAD,EAAKC,IAAL;AAAA,MAAWC,IAAX,uEAAkB,KAAlB;AAAA,SAA6B;AAClDF,IAAAA,EAAE,EAAFA,EADkD;AAElDC,IAAAA,IAAI,EAAJA,IAFkD;AAGlDC,IAAAA,IAAI,EAAJA,IAHkD;AAIlDC,IAAAA,CAAC,EAAE,CAJ+C;AAKlDC,IAAAA,CAAC,EAAE,CAL+C;AAMlDC,IAAAA,OAAO,EAAE,EANyC;AAOlDC,IAAAA,QAAQ,EAAE;AAPwC,GAA7B;AAAA,CAAlB;AASP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,oCAAIC,KAAJ;AAAIA,IAAAA,KAAJ;AAAA;;AAAA,SAAc,UAACC,IAAD;AAAA,WAAUD,KAAK,CAACE,QAAN,CAAeD,IAAI,CAACR,IAApB,CAAV;AAAA,GAAd;AAAA,CAAjB;AACP,OAAO,IAAMU,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD;AAAA,SAAYjB,GAAG,CAAC,6BAAIiB,MAAM,CAACP,OAAX,sBAAuBO,MAAM,CAACN,QAA9B,GAAwCO,GAAxC,CAA4Cf,SAA5C,CAAD,CAAf;AAAA,CAAhB;AACP,OAAO,IAAMgB,QAAQ,GAAG,SAAXA,QAAW,CAACF,MAAD;AAAA,SAAY,CAChCA,MAAM,CAACP,OAAP,CAAeU,MADiB,EAEhCH,MAAM,CAACN,QAAP,CAAgBS,MAFgB,EAGlCC,MAHkC,CAG3BC,OAH2B,EAGlBF,MAHkB,GAGTrB,IAHH;AAAA,CAAjB;AAIP,OAAO,IAAMwB,OAAO,GAAG,SAAVA,OAAU,CAACN,MAAD;AAAA,SAAYA,MAAM,CAACR,CAAP,GAAWO,OAAO,CAACC,MAAD,CAA9B;AAAA,CAAhB;AACP,OAAO,IAAMO,QAAQ,GAAG,SAAXA,QAAW,CAACP,MAAD;AAAA,SAAYA,MAAM,CAACT,CAAP,GAAWW,QAAQ,CAACF,MAAD,CAA/B;AAAA,CAAjB;AACP,OAAO,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,MAAN,CAAa,UAACC,GAAD,EAAMC,CAAN;AAAA,WAAYD,GAAG,GAAG1B,SAAS,CAAC2B,CAAD,CAA3B;AAAA,GAAb,EAA6C,CAA7C,CAAX;AAAA,CAAvB;AACP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACb,MAAD,EAASc,IAAT,EAAkB;AACzC,SAAOA,IAAI,GAAG9B,QAAQ,CAACgB,MAAD,EAASc,IAAT,CAAR,GAAyB7B,SAAS,CAAC6B,IAAD,CAArC,GAA8C,CAAzD;AACH,CAFM","sourcesContent":["import { SIZE } from '../constants';\nimport { max } from './index';\nimport { getUnitX, nodeCount, rightSide } from './units';\nexport const newFamily = (id, type, main = false) => ({\n    id,\n    type,\n    main,\n    Y: 0,\n    X: 0,\n    parents: [],\n    children: [],\n});\nexport const withType = (...types) => (item) => types.includes(item.type);\nexport const widthOf = (family) => max([...family.parents, ...family.children].map(rightSide));\nexport const heightOf = (family) => [\n    family.parents.length,\n    family.children.length,\n].filter(Boolean).length * SIZE;\nexport const rightOf = (family) => family.X + widthOf(family);\nexport const bottomOf = (family) => family.Y + heightOf(family);\nexport const unitNodesCount = (units) => units.reduce((acc, b) => acc + nodeCount(b), 0);\nexport const getParentsX = (family, unit) => {\n    return unit ? getUnitX(family, unit) + nodeCount(unit) : 0;\n};\n"]},"metadata":{},"sourceType":"module"}
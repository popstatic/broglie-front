{"ast":null,"code":"import _toConsumableArray from \"/var/projets/broglie-social-react/sociala-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/var/projets/broglie-social-react/sociala-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/projets/broglie-social-react/sociala-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { toMap, withId } from './utils';\nimport { withType } from './utils/family';\nimport { FamilyType } from './types';\n\nvar Store = /*#__PURE__*/function () {\n  function Store(nodes, rootId) {\n    _classCallCheck(this, Store);\n\n    if (!nodes.find(withId(rootId))) throw new ReferenceError();\n    this.nextId = 0;\n    this.families = new Map();\n    this.nodes = toMap(nodes);\n    this.root = this.nodes.get(rootId);\n  }\n\n  _createClass(Store, [{\n    key: \"getNextId\",\n    value: function getNextId() {\n      return ++this.nextId;\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(id) {\n      return this.nodes.get(id);\n    }\n  }, {\n    key: \"getNodes\",\n    value: function getNodes(ids) {\n      var _this = this;\n\n      return ids.map(function (id) {\n        return _this.getNode(id);\n      });\n    }\n  }, {\n    key: \"getFamily\",\n    value: function getFamily(id) {\n      return this.families.get(id);\n    }\n  }, {\n    key: \"familiesArray\",\n    get: function get() {\n      return _toConsumableArray(this.families.values());\n    }\n  }, {\n    key: \"rootFamilies\",\n    get: function get() {\n      return this.familiesArray.filter(withType(FamilyType.root));\n    }\n  }, {\n    key: \"rootFamily\",\n    get: function get() {\n      return this.rootFamilies.find(function (family) {\n        return family.main;\n      });\n    }\n  }]);\n\n  return Store;\n}();\n\nexport default Store;","map":{"version":3,"sources":["/var/projets/broglie-social-react/sociala-react/node_modules/relatives-tree/lib/store.js"],"names":["toMap","withId","withType","FamilyType","Store","nodes","rootId","find","ReferenceError","nextId","families","Map","root","get","id","ids","map","getNode","values","familiesArray","filter","rootFamilies","family","main"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,MAAhB,QAA8B,SAA9B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,UAAT,QAA2B,SAA3B;;IACMC,K;AACF,iBAAYC,KAAZ,EAAmBC,MAAnB,EAA2B;AAAA;;AACvB,QAAI,CAACD,KAAK,CAACE,IAAN,CAAWN,MAAM,CAACK,MAAD,CAAjB,CAAL,EACI,MAAM,IAAIE,cAAJ,EAAN;AACJ,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACA,SAAKN,KAAL,GAAaL,KAAK,CAACK,KAAD,CAAlB;AACA,SAAKO,IAAL,GAAa,KAAKP,KAAL,CAAWQ,GAAX,CAAeP,MAAf,CAAb;AACH;;;;WACD,qBAAY;AAAE,aAAO,EAAE,KAAKG,MAAd;AAAuB;;;WACrC,iBAAQK,EAAR,EAAY;AACR,aAAO,KAAKT,KAAL,CAAWQ,GAAX,CAAeC,EAAf,CAAP;AACH;;;WACD,kBAASC,GAAT,EAAc;AAAA;;AACV,aAAOA,GAAG,CAACC,GAAJ,CAAQ,UAAAF,EAAE;AAAA,eAAI,KAAI,CAACG,OAAL,CAAaH,EAAb,CAAJ;AAAA,OAAV,CAAP;AACH;;;WACD,mBAAUA,EAAV,EAAc;AACV,aAAO,KAAKJ,QAAL,CAAcG,GAAd,CAAkBC,EAAlB,CAAP;AACH;;;SACD,eAAoB;AAChB,gCAAW,KAAKJ,QAAL,CAAcQ,MAAd,EAAX;AACH;;;SACD,eAAmB;AACf,aAAO,KAAKC,aAAL,CAAmBC,MAAnB,CAA0BlB,QAAQ,CAACC,UAAU,CAACS,IAAZ,CAAlC,CAAP;AACH;;;SACD,eAAiB;AACb,aAAO,KAAKS,YAAL,CAAkBd,IAAlB,CAAuB,UAAAe,MAAM;AAAA,eAAIA,MAAM,CAACC,IAAX;AAAA,OAA7B,CAAP;AACH;;;;;;AAEL,eAAenB,KAAf","sourcesContent":["import { toMap, withId } from './utils';\nimport { withType } from './utils/family';\nimport { FamilyType } from './types';\nclass Store {\n    constructor(nodes, rootId) {\n        if (!nodes.find(withId(rootId)))\n            throw new ReferenceError();\n        this.nextId = 0;\n        this.families = new Map();\n        this.nodes = toMap(nodes);\n        this.root = (this.nodes.get(rootId));\n    }\n    getNextId() { return ++this.nextId; }\n    getNode(id) {\n        return this.nodes.get(id);\n    }\n    getNodes(ids) {\n        return ids.map(id => this.getNode(id));\n    }\n    getFamily(id) {\n        return this.families.get(id);\n    }\n    get familiesArray() {\n        return [...this.families.values()];\n    }\n    get rootFamilies() {\n        return this.familiesArray.filter(withType(FamilyType.root));\n    }\n    get rootFamily() {\n        return this.rootFamilies.find(family => family.main);\n    }\n}\nexport default Store;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/var/projets/broglie-social-react/sociala-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { byGender, relToNode, withId } from '../utils';\nimport { newUnit } from '../utils/units';\nimport { newFamily } from '../utils/family';\nimport { setDefaultUnitShift } from '../utils/setDefaultUnitShift';\nimport { createChildUnitsFunc } from '../utils/createChildUnitsFunc';\nimport { FamilyType } from '../types';\n\nvar hasSameRelation = function hasSameRelation(node) {\n  return function (rel) {\n    return !node || node.children.some(withId(rel.id));\n  };\n};\n\nvar getChildUnitsFunc = function getChildUnitsFunc(store) {\n  var toNode = relToNode(store);\n  var createChildUnits = createChildUnitsFunc(store);\n  return function (familyId, parents) {\n    var _parents = _slicedToArray(parents, 2),\n        first = _parents[0],\n        second = _parents[1];\n\n    return first.children.filter(hasSameRelation(second)).flatMap(function (rel) {\n      return createChildUnits(familyId, toNode(rel));\n    });\n  };\n};\n\nexport var createFamilyFunc = function createFamilyFunc(store) {\n  var getChildUnits = getChildUnitsFunc(store);\n  return function (parentIDs) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FamilyType.root;\n    var isMain = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var family = newFamily(store.getNextId(), type, isMain);\n    var parents = parentIDs.map(function (id) {\n      return store.getNode(id);\n    }).sort(byGender(store.root.gender));\n    family.parents = [newUnit(family.id, parents)];\n    family.children = getChildUnits(family.id, parents);\n    setDefaultUnitShift(family);\n    return family;\n  };\n};","map":{"version":3,"sources":["/var/projets/broglie-social-react/sociala-react/node_modules/relatives-tree/lib/children/create.js"],"names":["byGender","relToNode","withId","newUnit","newFamily","setDefaultUnitShift","createChildUnitsFunc","FamilyType","hasSameRelation","node","rel","children","some","id","getChildUnitsFunc","store","toNode","createChildUnits","familyId","parents","first","second","filter","flatMap","createFamilyFunc","getChildUnits","parentIDs","type","root","isMain","family","getNextId","map","getNode","sort","gender"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,UAA5C;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,oBAAT,QAAqC,+BAArC;AACA,SAASC,UAAT,QAA2B,UAA3B;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD;AAAA,SAAW,UAACC,GAAD;AAAA,WAAS,CAACD,IAAD,IAASA,IAAI,CAACE,QAAL,CAAcC,IAAd,CAAmBV,MAAM,CAACQ,GAAG,CAACG,EAAL,CAAzB,CAAlB;AAAA,GAAX;AAAA,CAAxB;;AACA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AACjC,MAAMC,MAAM,GAAGf,SAAS,CAACc,KAAD,CAAxB;AACA,MAAME,gBAAgB,GAAGX,oBAAoB,CAACS,KAAD,CAA7C;AACA,SAAO,UAACG,QAAD,EAAWC,OAAX,EAAuB;AAC1B,kCAAwBA,OAAxB;AAAA,QAAOC,KAAP;AAAA,QAAcC,MAAd;;AACA,WAAOD,KAAK,CAACT,QAAN,CACFW,MADE,CACKd,eAAe,CAACa,MAAD,CADpB,EAEFE,OAFE,CAEM,UAACb,GAAD;AAAA,aAASO,gBAAgB,CAACC,QAAD,EAAWF,MAAM,CAACN,GAAD,CAAjB,CAAzB;AAAA,KAFN,CAAP;AAGH,GALD;AAMH,CATD;;AAUA,OAAO,IAAMc,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACT,KAAD,EAAW;AACvC,MAAMU,aAAa,GAAGX,iBAAiB,CAACC,KAAD,CAAvC;AACA,SAAO,UAACW,SAAD,EAAuD;AAAA,QAA3CC,IAA2C,uEAApCpB,UAAU,CAACqB,IAAyB;AAAA,QAAnBC,MAAmB,uEAAV,KAAU;AAC1D,QAAMC,MAAM,GAAG1B,SAAS,CAACW,KAAK,CAACgB,SAAN,EAAD,EAAoBJ,IAApB,EAA0BE,MAA1B,CAAxB;AACA,QAAMV,OAAO,GAAGO,SAAS,CACpBM,GADW,CACP,UAAAnB,EAAE;AAAA,aAAIE,KAAK,CAACkB,OAAN,CAAcpB,EAAd,CAAJ;AAAA,KADK,EAEXqB,IAFW,CAENlC,QAAQ,CAACe,KAAK,CAACa,IAAN,CAAWO,MAAZ,CAFF,CAAhB;AAGAL,IAAAA,MAAM,CAACX,OAAP,GAAiB,CAAChB,OAAO,CAAC2B,MAAM,CAACjB,EAAR,EAAYM,OAAZ,CAAR,CAAjB;AACAW,IAAAA,MAAM,CAACnB,QAAP,GAAkBc,aAAa,CAACK,MAAM,CAACjB,EAAR,EAAYM,OAAZ,CAA/B;AACAd,IAAAA,mBAAmB,CAACyB,MAAD,CAAnB;AACA,WAAOA,MAAP;AACH,GATD;AAUH,CAZM","sourcesContent":["import { byGender, relToNode, withId } from '../utils';\nimport { newUnit } from '../utils/units';\nimport { newFamily } from '../utils/family';\nimport { setDefaultUnitShift } from '../utils/setDefaultUnitShift';\nimport { createChildUnitsFunc } from '../utils/createChildUnitsFunc';\nimport { FamilyType } from '../types';\nconst hasSameRelation = (node) => ((rel) => !node || node.children.some(withId(rel.id)));\nconst getChildUnitsFunc = (store) => {\n    const toNode = relToNode(store);\n    const createChildUnits = createChildUnitsFunc(store);\n    return (familyId, parents) => {\n        const [first, second] = parents;\n        return first.children\n            .filter(hasSameRelation(second))\n            .flatMap((rel) => createChildUnits(familyId, toNode(rel)));\n    };\n};\nexport const createFamilyFunc = (store) => {\n    const getChildUnits = getChildUnitsFunc(store);\n    return (parentIDs, type = FamilyType.root, isMain = false) => {\n        const family = newFamily(store.getNextId(), type, isMain);\n        const parents = parentIDs\n            .map(id => store.getNode(id))\n            .sort(byGender(store.root.gender));\n        family.parents = [newUnit(family.id, parents)];\n        family.children = getChildUnits(family.id, parents);\n        setDefaultUnitShift(family);\n        return family;\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
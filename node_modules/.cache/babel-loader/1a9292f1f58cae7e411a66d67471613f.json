{"ast":null,"code":"import { FamilyType } from '../types';\nimport { min, prop } from './index';\nimport { withType } from './family';\nimport { getUnitX } from './units';\n\nconst alignGenerations = (families, root) => {\n  const parents = families.find(family => family.cid === root.id);\n\n  if (parents) {\n    const shift = getUnitX(parents, parents.children[0]) - getUnitX(root, root.parents[0]);\n    families.filter(withType(FamilyType.child, FamilyType.root)).forEach(family => family.X += shift);\n  }\n};\n\nconst correct = (families, coordinate) => {\n  const shift = min(families.map(prop(coordinate))) * -1;\n  if (shift !== 0) families.forEach(family => family[coordinate] += shift);\n};\n\nexport const correctPositions = store => {\n  const families = store.familiesArray;\n  alignGenerations(families, store.rootFamily);\n  correct(families, 'Y');\n  correct(families, 'X');\n  return store;\n};","map":{"version":3,"sources":["/var/projets/broglie-social-react/sociala-react/node_modules/relatives-tree/lib/utils/correctPositions.js"],"names":["FamilyType","min","prop","withType","getUnitX","alignGenerations","families","root","parents","find","family","cid","id","shift","children","filter","child","forEach","X","correct","coordinate","map","correctPositions","store","familiesArray","rootFamily"],"mappings":"AAAA,SAASA,UAAT,QAA2B,UAA3B;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,SAA1B;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,SAASC,QAAT,QAAyB,SAAzB;;AACA,MAAMC,gBAAgB,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB;AACzC,QAAMC,OAAO,GAAGF,QAAQ,CAACG,IAAT,CAAcC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAeJ,IAAI,CAACK,EAA5C,CAAhB;;AACA,MAAIJ,OAAJ,EAAa;AACT,UAAMK,KAAK,GAAIT,QAAQ,CAACI,OAAD,EAAUA,OAAO,CAACM,QAAR,CAAiB,CAAjB,CAAV,CAAR,GACXV,QAAQ,CAACG,IAAD,EAAOA,IAAI,CAACC,OAAL,CAAa,CAAb,CAAP,CADZ;AAEAF,IAAAA,QAAQ,CACHS,MADL,CACYZ,QAAQ,CAACH,UAAU,CAACgB,KAAZ,EAAmBhB,UAAU,CAACO,IAA9B,CADpB,EAEKU,OAFL,CAEaP,MAAM,IAAIA,MAAM,CAACQ,CAAP,IAAYL,KAFnC;AAGH;AACJ,CATD;;AAUA,MAAMM,OAAO,GAAG,CAACb,QAAD,EAAWc,UAAX,KAA0B;AACtC,QAAMP,KAAK,GAAGZ,GAAG,CAACK,QAAQ,CAACe,GAAT,CAAanB,IAAI,CAACkB,UAAD,CAAjB,CAAD,CAAH,GAAsC,CAAC,CAArD;AACA,MAAIP,KAAK,KAAK,CAAd,EACIP,QAAQ,CAACW,OAAT,CAAiBP,MAAM,IAAIA,MAAM,CAACU,UAAD,CAAN,IAAsBP,KAAjD;AACP,CAJD;;AAKA,OAAO,MAAMS,gBAAgB,GAAIC,KAAD,IAAW;AACvC,QAAMjB,QAAQ,GAAGiB,KAAK,CAACC,aAAvB;AACAnB,EAAAA,gBAAgB,CAACC,QAAD,EAAWiB,KAAK,CAACE,UAAjB,CAAhB;AACAN,EAAAA,OAAO,CAACb,QAAD,EAAW,GAAX,CAAP;AACAa,EAAAA,OAAO,CAACb,QAAD,EAAW,GAAX,CAAP;AACA,SAAOiB,KAAP;AACH,CANM","sourcesContent":["import { FamilyType } from '../types';\nimport { min, prop } from './index';\nimport { withType } from './family';\nimport { getUnitX } from './units';\nconst alignGenerations = (families, root) => {\n    const parents = families.find(family => family.cid === root.id);\n    if (parents) {\n        const shift = (getUnitX(parents, parents.children[0]) -\n            getUnitX(root, root.parents[0]));\n        families\n            .filter(withType(FamilyType.child, FamilyType.root))\n            .forEach(family => family.X += shift);\n    }\n};\nconst correct = (families, coordinate) => {\n    const shift = min(families.map(prop(coordinate))) * -1;\n    if (shift !== 0)\n        families.forEach(family => family[coordinate] += shift);\n};\nexport const correctPositions = (store) => {\n    const families = store.familiesArray;\n    alignGenerations(families, store.rootFamily);\n    correct(families, 'Y');\n    correct(families, 'X');\n    return store;\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { DEFAULT_STATE, MAX_ZOOM, MIN_ZOOM } from './constants';\nimport { getClientXY, getScale, getTouchesRange, getWheelDelta, isTouch, isTouchEvent, limitZoom } from './helpers';\nexport function create(_ref) {\n  let {\n    element,\n    minZoom = MIN_ZOOM,\n    maxZoom = MAX_ZOOM,\n    captureWheel\n  } = _ref;\n  const touch = isTouch();\n  let action = 'none';\n  let state = DEFAULT_STATE;\n  const current = {\n    x: 0,\n    y: 0,\n    z: 0,\n    range: 0\n  };\n\n  function setState(value) {\n    state = value;\n    const point = element.children.item(0);\n    if (point) point.style.transform = `translate(${value.x}px, ${value.y}px) scale(${value.z})`;\n  }\n\n  function setCurrentXY(_ref2) {\n    let {\n      X,\n      Y\n    } = _ref2;\n    current.x = X;\n    current.y = Y;\n  }\n\n  function startMoving(event) {\n    action = 'move';\n    setCurrentXY(getClientXY(event));\n  }\n\n  function setPosition(z, pageX, pageY) {\n    const {\n      left,\n      top\n    } = element.getBoundingClientRect();\n    const ratio = z / state.z;\n    const offsetX = pageX - left - window.pageXOffset - state.x;\n    const offsetY = pageY - top - window.pageYOffset - state.y;\n    setState({\n      x: state.x - (offsetX * ratio - offsetX),\n      y: state.y - (offsetY * ratio - offsetY),\n      z\n    });\n  }\n\n  function onStart(event) {\n    event.preventDefault();\n\n    if (isTouchEvent(event) && event.touches.length === 2) {\n      action = 'pinch';\n      current.z = state.z;\n      current.range = getTouchesRange(event);\n    } else startMoving(event);\n  }\n\n  function onMove(event) {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n\n    if (action === 'move') {\n      const clientXY = getClientXY(event);\n      const x = state.x - (current.x - clientXY.X);\n      const y = state.y - (current.y - clientXY.Y);\n      setCurrentXY(clientXY);\n      setState({\n        x,\n        y,\n        z: state.z\n      });\n    } else if (action === 'pinch') {\n      const {\n        scale,\n        pageX,\n        pageY\n      } = getScale(event, current.range);\n      const z = limitZoom(current.z * scale, minZoom, maxZoom);\n      setPosition(z, pageX, pageY);\n    }\n  }\n\n  function onEnd(event) {\n    if (action === 'pinch' && isTouchEvent(event) && event.touches.length === 1) startMoving(event);else action = 'none';\n  }\n\n  function onWheel(event) {\n    if (!captureWheel && !event.altKey) return;\n    event.preventDefault();\n    event.stopPropagation();\n    const delta = getWheelDelta(event) * -1;\n    const z = limitZoom(state.z + delta, minZoom, maxZoom);\n    setPosition(z, event.pageX, event.pageY);\n  }\n\n  const events = [{\n    type: touch ? 'touchstart' : 'mousedown',\n    listener: onStart\n  }, {\n    type: touch ? 'touchmove' : 'mousemove',\n    listener: onMove\n  }, {\n    type: touch ? 'touchend' : 'mouseup',\n    listener: onEnd\n  }, {\n    type: touch ? 'touchleave' : 'mouseleave',\n    listener: onEnd\n  }, {\n    type: 'touchcancel',\n    listener: onEnd\n  }, {\n    type: 'wheel',\n    listener: onWheel\n  }];\n  const {\n    width,\n    height\n  } = element.getBoundingClientRect();\n  setState({\n    x: width / 2,\n    y: height / 2,\n    z: state.z\n  });\n  events.forEach(_ref3 => {\n    let {\n      type,\n      listener\n    } = _ref3;\n    return element.addEventListener(type, listener);\n  });\n  return () => events.forEach(_ref4 => {\n    let {\n      type,\n      listener\n    } = _ref4;\n    return element.removeEventListener(type, listener);\n  });\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DEFAULT_STATE, MAX_ZOOM, MIN_ZOOM } from './constants';\nimport { getClientXY, getScale, getTouchesRange, getWheelDelta, isTouch, isTouchEvent, limitZoom } from './helpers';\nexport function create({ element, minZoom = MIN_ZOOM, maxZoom = MAX_ZOOM, captureWheel }) {\n    const touch = isTouch();\n    let action = 'none';\n    let state = DEFAULT_STATE;\n    const current = { x: 0, y: 0, z: 0, range: 0 };\n    function setState(value) {\n        state = value;\n        const point = element.children.item(0);\n        if (point)\n            point.style.transform = `translate(${value.x}px, ${value.y}px) scale(${value.z})`;\n    }\n    function setCurrentXY({ X, Y }) {\n        current.x = X;\n        current.y = Y;\n    }\n    function startMoving(event) {\n        action = 'move';\n        setCurrentXY(getClientXY(event));\n    }\n    function setPosition(z, pageX, pageY) {\n        const { left, top } = element.getBoundingClientRect();\n        const ratio = z / state.z;\n        const offsetX = (pageX - left - window.pageXOffset) - state.x;\n        const offsetY = (pageY - top - window.pageYOffset) - state.y;\n        setState({\n            x: state.x - ((offsetX * ratio) - offsetX),\n            y: state.y - ((offsetY * ratio) - offsetY),\n            z,\n        });\n    }\n    function onStart(event) {\n        event.preventDefault();\n        if (isTouchEvent(event) && event.touches.length === 2) {\n            action = 'pinch';\n            current.z = state.z;\n            current.range = getTouchesRange(event);\n        }\n        else\n            startMoving(event);\n    }\n    function onMove(event) {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n        if (action === 'move') {\n            const clientXY = getClientXY(event);\n            const x = state.x - (current.x - clientXY.X);\n            const y = state.y - (current.y - clientXY.Y);\n            setCurrentXY(clientXY);\n            setState({ x, y, z: state.z });\n        }\n        else if (action === 'pinch') {\n            const { scale, pageX, pageY } = getScale(event, current.range);\n            const z = limitZoom(current.z * scale, minZoom, maxZoom);\n            setPosition(z, pageX, pageY);\n        }\n    }\n    function onEnd(event) {\n        if (action === 'pinch' && isTouchEvent(event) && event.touches.length === 1)\n            startMoving(event);\n        else\n            action = 'none';\n    }\n    function onWheel(event) {\n        if (!captureWheel && !event.altKey)\n            return;\n        event.preventDefault();\n        event.stopPropagation();\n        const delta = getWheelDelta(event) * -1;\n        const z = limitZoom(state.z + delta, minZoom, maxZoom);\n        setPosition(z, event.pageX, event.pageY);\n    }\n    const events = [\n        { type: touch ? 'touchstart' : 'mousedown', listener: onStart },\n        { type: touch ? 'touchmove' : 'mousemove', listener: onMove },\n        { type: touch ? 'touchend' : 'mouseup', listener: onEnd },\n        { type: touch ? 'touchleave' : 'mouseleave', listener: onEnd },\n        { type: 'touchcancel', listener: onEnd },\n        { type: 'wheel', listener: onWheel },\n    ];\n    const { width, height } = element.getBoundingClientRect();\n    setState({ x: width / 2, y: height / 2, z: state.z });\n    events.forEach(({ type, listener }) => element.addEventListener(type, listener));\n    return () => events.forEach(({ type, listener }) => element.removeEventListener(type, listener));\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}
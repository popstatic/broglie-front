{"ast":null,"code":"import { byGender, relToNode, withId } from '../utils';\nimport { newUnit } from '../utils/units';\nimport { newFamily } from '../utils/family';\nimport { setDefaultUnitShift } from '../utils/setDefaultUnitShift';\nimport { createChildUnitsFunc } from '../utils/createChildUnitsFunc';\nimport { FamilyType } from '../types';\n\nconst hasSameRelation = node => rel => !node || node.children.some(withId(rel.id));\n\nconst getChildUnitsFunc = store => {\n  const toNode = relToNode(store);\n  const createChildUnits = createChildUnitsFunc(store);\n  return (familyId, parents) => {\n    const [first, second] = parents;\n    return first.children.filter(hasSameRelation(second)).flatMap(rel => createChildUnits(familyId, toNode(rel)));\n  };\n};\n\nexport const createFamilyFunc = store => {\n  const getChildUnits = getChildUnitsFunc(store);\n  return function (parentIDs) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FamilyType.root;\n    let isMain = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const family = newFamily(store.getNextId(), type, isMain);\n    const parents = parentIDs.map(id => store.getNode(id)).sort(byGender(store.root.gender));\n    family.parents = [newUnit(family.id, parents)];\n    family.children = getChildUnits(family.id, parents);\n    setDefaultUnitShift(family);\n    return family;\n  };\n};","map":{"version":3,"sources":["/var/projets/broglie-social-react/sociala-react/node_modules/relatives-tree/lib/children/create.js"],"names":["byGender","relToNode","withId","newUnit","newFamily","setDefaultUnitShift","createChildUnitsFunc","FamilyType","hasSameRelation","node","rel","children","some","id","getChildUnitsFunc","store","toNode","createChildUnits","familyId","parents","first","second","filter","flatMap","createFamilyFunc","getChildUnits","parentIDs","type","root","isMain","family","getNextId","map","getNode","sort","gender"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,UAA5C;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,oBAAT,QAAqC,+BAArC;AACA,SAASC,UAAT,QAA2B,UAA3B;;AACA,MAAMC,eAAe,GAAIC,IAAD,IAAYC,GAAD,IAAS,CAACD,IAAD,IAASA,IAAI,CAACE,QAAL,CAAcC,IAAd,CAAmBV,MAAM,CAACQ,GAAG,CAACG,EAAL,CAAzB,CAArD;;AACA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACjC,QAAMC,MAAM,GAAGf,SAAS,CAACc,KAAD,CAAxB;AACA,QAAME,gBAAgB,GAAGX,oBAAoB,CAACS,KAAD,CAA7C;AACA,SAAO,CAACG,QAAD,EAAWC,OAAX,KAAuB;AAC1B,UAAM,CAACC,KAAD,EAAQC,MAAR,IAAkBF,OAAxB;AACA,WAAOC,KAAK,CAACT,QAAN,CACFW,MADE,CACKd,eAAe,CAACa,MAAD,CADpB,EAEFE,OAFE,CAEOb,GAAD,IAASO,gBAAgB,CAACC,QAAD,EAAWF,MAAM,CAACN,GAAD,CAAjB,CAF/B,CAAP;AAGH,GALD;AAMH,CATD;;AAUA,OAAO,MAAMc,gBAAgB,GAAIT,KAAD,IAAW;AACvC,QAAMU,aAAa,GAAGX,iBAAiB,CAACC,KAAD,CAAvC;AACA,SAAO,UAACW,SAAD,EAAuD;AAAA,QAA3CC,IAA2C,uEAApCpB,UAAU,CAACqB,IAAyB;AAAA,QAAnBC,MAAmB,uEAAV,KAAU;AAC1D,UAAMC,MAAM,GAAG1B,SAAS,CAACW,KAAK,CAACgB,SAAN,EAAD,EAAoBJ,IAApB,EAA0BE,MAA1B,CAAxB;AACA,UAAMV,OAAO,GAAGO,SAAS,CACpBM,GADW,CACPnB,EAAE,IAAIE,KAAK,CAACkB,OAAN,CAAcpB,EAAd,CADC,EAEXqB,IAFW,CAENlC,QAAQ,CAACe,KAAK,CAACa,IAAN,CAAWO,MAAZ,CAFF,CAAhB;AAGAL,IAAAA,MAAM,CAACX,OAAP,GAAiB,CAAChB,OAAO,CAAC2B,MAAM,CAACjB,EAAR,EAAYM,OAAZ,CAAR,CAAjB;AACAW,IAAAA,MAAM,CAACnB,QAAP,GAAkBc,aAAa,CAACK,MAAM,CAACjB,EAAR,EAAYM,OAAZ,CAA/B;AACAd,IAAAA,mBAAmB,CAACyB,MAAD,CAAnB;AACA,WAAOA,MAAP;AACH,GATD;AAUH,CAZM","sourcesContent":["import { byGender, relToNode, withId } from '../utils';\nimport { newUnit } from '../utils/units';\nimport { newFamily } from '../utils/family';\nimport { setDefaultUnitShift } from '../utils/setDefaultUnitShift';\nimport { createChildUnitsFunc } from '../utils/createChildUnitsFunc';\nimport { FamilyType } from '../types';\nconst hasSameRelation = (node) => ((rel) => !node || node.children.some(withId(rel.id)));\nconst getChildUnitsFunc = (store) => {\n    const toNode = relToNode(store);\n    const createChildUnits = createChildUnitsFunc(store);\n    return (familyId, parents) => {\n        const [first, second] = parents;\n        return first.children\n            .filter(hasSameRelation(second))\n            .flatMap((rel) => createChildUnits(familyId, toNode(rel)));\n    };\n};\nexport const createFamilyFunc = (store) => {\n    const getChildUnits = getChildUnitsFunc(store);\n    return (parentIDs, type = FamilyType.root, isMain = false) => {\n        const family = newFamily(store.getNextId(), type, isMain);\n        const parents = parentIDs\n            .map(id => store.getNode(id))\n            .sort(byGender(store.root.gender));\n        family.parents = [newUnit(family.id, parents)];\n        family.children = getChildUnits(family.id, parents);\n        setDefaultUnitShift(family);\n        return family;\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
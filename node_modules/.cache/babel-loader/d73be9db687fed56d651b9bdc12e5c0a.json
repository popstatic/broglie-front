{"ast":null,"code":"import { createChildUnitsFunc } from '../utils/createChildUnitsFunc';\nimport { createFamilyFunc } from '../children/create';\nimport { getSpouseNodesFunc } from '../utils/getSpouseNodesFunc';\nimport { setDefaultUnitShift } from '../utils/setDefaultUnitShift';\nimport { prop, withRelType } from '../utils';\nimport { newFamily } from '../utils/family';\nimport { unitsToNodes } from '../utils/units';\nimport { NODES_IN_COUPLE } from '../constants';\nimport { FamilyType, RelType } from '../types';\nimport { correctOverlaps } from './correctOverlaps';\nexport const createFamilyWithoutParents = store => {\n  const family = newFamily(store.getNextId(), FamilyType.root, true);\n  family.children = createChildUnitsFunc(store)(family.id, store.root);\n  setDefaultUnitShift(family);\n  return [family];\n};\n\nconst getParentIDs = (root, type) => root.parents.filter(withRelType(type)).map(prop('id'));\n\nexport const createDiffTypeFamilies = store => {\n  const createFamily = createFamilyFunc(store);\n  const bloodFamily = createFamily(getParentIDs(store.root, RelType.blood), FamilyType.root, true);\n  const adoptedFamily = createFamily(getParentIDs(store.root, RelType.adopted));\n  correctOverlaps(bloodFamily, adoptedFamily);\n  return [bloodFamily, adoptedFamily];\n};\nexport const createBloodFamilies = store => {\n  const createFamily = createFamilyFunc(store);\n  const mainFamily = createFamily(store.root.parents.map(prop('id')), FamilyType.root, true);\n  const parents = unitsToNodes(mainFamily.parents);\n\n  if (parents.length === NODES_IN_COUPLE) {\n    const {\n      left,\n      right\n    } = getSpouseNodesFunc(store)(parents);\n    return [left.map(node => createFamily([node.id])), mainFamily, right.map(node => createFamily([node.id]))].flat();\n  }\n\n  return [mainFamily];\n};","map":{"version":3,"sources":["/var/projets/broglie-social-react/sociala-react/node_modules/relatives-tree/lib/middle/create.js"],"names":["createChildUnitsFunc","createFamilyFunc","getSpouseNodesFunc","setDefaultUnitShift","prop","withRelType","newFamily","unitsToNodes","NODES_IN_COUPLE","FamilyType","RelType","correctOverlaps","createFamilyWithoutParents","store","family","getNextId","root","children","id","getParentIDs","type","parents","filter","map","createDiffTypeFamilies","createFamily","bloodFamily","blood","adoptedFamily","adopted","createBloodFamilies","mainFamily","length","left","right","node","flat"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,+BAArC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,UAAlC;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,UAApC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAO,MAAMC,0BAA0B,GAAIC,KAAD,IAAW;AACjD,QAAMC,MAAM,GAAGR,SAAS,CAACO,KAAK,CAACE,SAAN,EAAD,EAAoBN,UAAU,CAACO,IAA/B,EAAqC,IAArC,CAAxB;AACAF,EAAAA,MAAM,CAACG,QAAP,GAAkBjB,oBAAoB,CAACa,KAAD,CAApB,CAA4BC,MAAM,CAACI,EAAnC,EAAuCL,KAAK,CAACG,IAA7C,CAAlB;AACAb,EAAAA,mBAAmB,CAACW,MAAD,CAAnB;AACA,SAAO,CAACA,MAAD,CAAP;AACH,CALM;;AAMP,MAAMK,YAAY,GAAG,CAACH,IAAD,EAAOI,IAAP,KAAiBJ,IAAI,CAACK,OAAL,CAAaC,MAAb,CAAoBjB,WAAW,CAACe,IAAD,CAA/B,EAAuCG,GAAvC,CAA2CnB,IAAI,CAAC,IAAD,CAA/C,CAAtC;;AACA,OAAO,MAAMoB,sBAAsB,GAAIX,KAAD,IAAW;AAC7C,QAAMY,YAAY,GAAGxB,gBAAgB,CAACY,KAAD,CAArC;AACA,QAAMa,WAAW,GAAGD,YAAY,CAACN,YAAY,CAACN,KAAK,CAACG,IAAP,EAAaN,OAAO,CAACiB,KAArB,CAAb,EAA0ClB,UAAU,CAACO,IAArD,EAA2D,IAA3D,CAAhC;AACA,QAAMY,aAAa,GAAGH,YAAY,CAACN,YAAY,CAACN,KAAK,CAACG,IAAP,EAAaN,OAAO,CAACmB,OAArB,CAAb,CAAlC;AACAlB,EAAAA,eAAe,CAACe,WAAD,EAAcE,aAAd,CAAf;AACA,SAAO,CAACF,WAAD,EAAcE,aAAd,CAAP;AACH,CANM;AAOP,OAAO,MAAME,mBAAmB,GAAIjB,KAAD,IAAW;AAC1C,QAAMY,YAAY,GAAGxB,gBAAgB,CAACY,KAAD,CAArC;AACA,QAAMkB,UAAU,GAAGN,YAAY,CAACZ,KAAK,CAACG,IAAN,CAAWK,OAAX,CAAmBE,GAAnB,CAAuBnB,IAAI,CAAC,IAAD,CAA3B,CAAD,EAAqCK,UAAU,CAACO,IAAhD,EAAsD,IAAtD,CAA/B;AACA,QAAMK,OAAO,GAAGd,YAAY,CAACwB,UAAU,CAACV,OAAZ,CAA5B;;AACA,MAAIA,OAAO,CAACW,MAAR,KAAmBxB,eAAvB,EAAwC;AACpC,UAAM;AAAEyB,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBhC,kBAAkB,CAACW,KAAD,CAAlB,CAA0BQ,OAA1B,CAAxB;AACA,WAAO,CACHY,IAAI,CAACV,GAAL,CAASY,IAAI,IAAIV,YAAY,CAAC,CAACU,IAAI,CAACjB,EAAN,CAAD,CAA7B,CADG,EAEHa,UAFG,EAGHG,KAAK,CAACX,GAAN,CAAUY,IAAI,IAAIV,YAAY,CAAC,CAACU,IAAI,CAACjB,EAAN,CAAD,CAA9B,CAHG,EAILkB,IAJK,EAAP;AAKH;;AACD,SAAO,CAACL,UAAD,CAAP;AACH,CAbM","sourcesContent":["import { createChildUnitsFunc } from '../utils/createChildUnitsFunc';\nimport { createFamilyFunc } from '../children/create';\nimport { getSpouseNodesFunc } from '../utils/getSpouseNodesFunc';\nimport { setDefaultUnitShift } from '../utils/setDefaultUnitShift';\nimport { prop, withRelType } from '../utils';\nimport { newFamily } from '../utils/family';\nimport { unitsToNodes } from '../utils/units';\nimport { NODES_IN_COUPLE } from '../constants';\nimport { FamilyType, RelType } from '../types';\nimport { correctOverlaps } from './correctOverlaps';\nexport const createFamilyWithoutParents = (store) => {\n    const family = newFamily(store.getNextId(), FamilyType.root, true);\n    family.children = createChildUnitsFunc(store)(family.id, store.root);\n    setDefaultUnitShift(family);\n    return [family];\n};\nconst getParentIDs = (root, type) => (root.parents.filter(withRelType(type)).map(prop('id')));\nexport const createDiffTypeFamilies = (store) => {\n    const createFamily = createFamilyFunc(store);\n    const bloodFamily = createFamily(getParentIDs(store.root, RelType.blood), FamilyType.root, true);\n    const adoptedFamily = createFamily(getParentIDs(store.root, RelType.adopted));\n    correctOverlaps(bloodFamily, adoptedFamily);\n    return [bloodFamily, adoptedFamily];\n};\nexport const createBloodFamilies = (store) => {\n    const createFamily = createFamilyFunc(store);\n    const mainFamily = createFamily(store.root.parents.map(prop('id')), FamilyType.root, true);\n    const parents = unitsToNodes(mainFamily.parents);\n    if (parents.length === NODES_IN_COUPLE) {\n        const { left, right } = getSpouseNodesFunc(store)(parents);\n        return [\n            left.map(node => createFamily([node.id])),\n            mainFamily,\n            right.map(node => createFamily([node.id])),\n        ].flat();\n    }\n    return [mainFamily];\n};\n"]},"metadata":{},"sourceType":"module"}
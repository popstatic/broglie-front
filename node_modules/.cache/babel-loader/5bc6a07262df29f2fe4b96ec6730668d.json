{"ast":null,"code":"import { Gender, RelType } from '../types';\nimport { relToNode } from '../utils';\n\nvar createRel = function createRel(id) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : RelType.blood;\n  return {\n    id: id,\n    type: type\n  };\n};\n\nvar createNode = function createNode(gender) {\n  return {\n    id: \"\".concat(gender, \"-ph\"),\n    placeholder: true,\n    gender: gender,\n    parents: [],\n    siblings: [],\n    spouses: [],\n    children: []\n  };\n};\n\nvar createParents = function createParents(store) {\n  var father = createNode(Gender.male);\n  var mother = createNode(Gender.female);\n  father.spouses = [createRel(mother.id, RelType.married)];\n  mother.spouses = [createRel(father.id, RelType.married)];\n  return [father, mother].map(function (node) {\n    node.children = store.root.siblings.concat(createRel(store.root.id));\n    store.nodes.set(node.id, node);\n    return createRel(node.id);\n  });\n};\n\nvar setParents = function setParents(parents) {\n  return function (node) {\n    return node.parents = parents.slice();\n  };\n};\n\nexport var placeholders = function placeholders(store) {\n  if (!store.root.parents.length) {\n    var setParentsTo = setParents(createParents(store));\n    setParentsTo(store.root);\n    store.root.siblings.map(relToNode(store)).forEach(setParentsTo);\n  }\n\n  return store;\n};","map":{"version":3,"sources":["/var/projets/broglie-social-react/sociala-react/node_modules/relatives-tree/lib/middle/placeholders.js"],"names":["Gender","RelType","relToNode","createRel","id","type","blood","createNode","gender","placeholder","parents","siblings","spouses","children","createParents","store","father","male","mother","female","married","map","node","root","concat","nodes","set","setParents","slice","placeholders","length","setParentsTo","forEach"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,OAAjB,QAAgC,UAAhC;AACA,SAASC,SAAT,QAA0B,UAA1B;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,EAAD;AAAA,MAAKC,IAAL,uEAAYJ,OAAO,CAACK,KAApB;AAAA,SAA+B;AAAEF,IAAAA,EAAE,EAAFA,EAAF;AAAMC,IAAAA,IAAI,EAAJA;AAAN,GAA/B;AAAA,CAAlB;;AACA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD;AAAA,SAAa;AAC5BJ,IAAAA,EAAE,YAAKI,MAAL,QAD0B;AAE5BC,IAAAA,WAAW,EAAE,IAFe;AAG5BD,IAAAA,MAAM,EAAEA,MAHoB;AAI5BE,IAAAA,OAAO,EAAE,EAJmB;AAK5BC,IAAAA,QAAQ,EAAE,EALkB;AAM5BC,IAAAA,OAAO,EAAE,EANmB;AAO5BC,IAAAA,QAAQ,EAAE;AAPkB,GAAb;AAAA,CAAnB;;AASA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC7B,MAAMC,MAAM,GAAGT,UAAU,CAACP,MAAM,CAACiB,IAAR,CAAzB;AACA,MAAMC,MAAM,GAAGX,UAAU,CAACP,MAAM,CAACmB,MAAR,CAAzB;AACAH,EAAAA,MAAM,CAACJ,OAAP,GAAiB,CAACT,SAAS,CAACe,MAAM,CAACd,EAAR,EAAYH,OAAO,CAACmB,OAApB,CAAV,CAAjB;AACAF,EAAAA,MAAM,CAACN,OAAP,GAAiB,CAACT,SAAS,CAACa,MAAM,CAACZ,EAAR,EAAYH,OAAO,CAACmB,OAApB,CAAV,CAAjB;AACA,SAAO,CAACJ,MAAD,EAASE,MAAT,EAAiBG,GAAjB,CAAqB,UAAAC,IAAI,EAAI;AAChCA,IAAAA,IAAI,CAACT,QAAL,GAAgBE,KAAK,CAACQ,IAAN,CAAWZ,QAAX,CAAoBa,MAApB,CAA2BrB,SAAS,CAACY,KAAK,CAACQ,IAAN,CAAWnB,EAAZ,CAApC,CAAhB;AACAW,IAAAA,KAAK,CAACU,KAAN,CAAYC,GAAZ,CAAgBJ,IAAI,CAAClB,EAArB,EAAyBkB,IAAzB;AACA,WAAOnB,SAAS,CAACmB,IAAI,CAAClB,EAAN,CAAhB;AACH,GAJM,CAAP;AAKH,CAVD;;AAWA,IAAMuB,UAAU,GAAG,SAAbA,UAAa,CAACjB,OAAD;AAAA,SAAc,UAACY,IAAD;AAAA,WAAUA,IAAI,CAACZ,OAAL,GAAeA,OAAO,CAACkB,KAAR,EAAzB;AAAA,GAAd;AAAA,CAAnB;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACd,KAAD,EAAW;AACnC,MAAI,CAACA,KAAK,CAACQ,IAAN,CAAWb,OAAX,CAAmBoB,MAAxB,EAAgC;AAC5B,QAAMC,YAAY,GAAGJ,UAAU,CAACb,aAAa,CAACC,KAAD,CAAd,CAA/B;AACAgB,IAAAA,YAAY,CAAChB,KAAK,CAACQ,IAAP,CAAZ;AACAR,IAAAA,KAAK,CAACQ,IAAN,CAAWZ,QAAX,CACKU,GADL,CACSnB,SAAS,CAACa,KAAD,CADlB,EAEKiB,OAFL,CAEaD,YAFb;AAGH;;AACD,SAAOhB,KAAP;AACH,CATM","sourcesContent":["import { Gender, RelType } from '../types';\nimport { relToNode } from '../utils';\nconst createRel = (id, type = RelType.blood) => ({ id, type });\nconst createNode = (gender) => ({\n    id: `${gender}-ph`,\n    placeholder: true,\n    gender: gender,\n    parents: [],\n    siblings: [],\n    spouses: [],\n    children: [],\n});\nconst createParents = (store) => {\n    const father = createNode(Gender.male);\n    const mother = createNode(Gender.female);\n    father.spouses = [createRel(mother.id, RelType.married)];\n    mother.spouses = [createRel(father.id, RelType.married)];\n    return [father, mother].map(node => {\n        node.children = store.root.siblings.concat(createRel(store.root.id));\n        store.nodes.set(node.id, node);\n        return createRel(node.id);\n    });\n};\nconst setParents = (parents) => ((node) => node.parents = parents.slice());\nexport const placeholders = (store) => {\n    if (!store.root.parents.length) {\n        const setParentsTo = setParents(createParents(store));\n        setParentsTo(store.root);\n        store.root.siblings\n            .map(relToNode(store))\n            .forEach(setParentsTo);\n    }\n    return store;\n};\n"]},"metadata":{},"sourceType":"module"}